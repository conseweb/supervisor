// Code generated by protoc-gen-go.
// source: supervisor.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	supervisor.proto

It has these top-level messages:
	FarmerAccount
	FarmerOnLineReq
	FarmerOnLineRsp
	FarmerPingReq
	FarmerPingRsp
	FarmerChallengeReq
	FarmerChallengeRsp
	FarmerOffLineReq
	FarmerOffLineRsp
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// farmer state
type FarmerState int32

const (
	FarmerState_OFFLINE FarmerState = 0
	FarmerState_ONLINE  FarmerState = 1
	FarmerState_LOST    FarmerState = 2
)

var FarmerState_name = map[int32]string{
	0: "OFFLINE",
	1: "ONLINE",
	2: "LOST",
}
var FarmerState_value = map[string]int32{
	"OFFLINE": 0,
	"ONLINE":  1,
	"LOST":    2,
}

func (x FarmerState) String() string {
	return proto.EnumName(FarmerState_name, int32(x))
}

type HashType int32

const (
	HashType_SHA256 HashType = 0
	HashType_SHA1   HashType = 1
	HashType_SHA3   HashType = 2
)

var HashType_name = map[int32]string{
	0: "SHA256",
	1: "SHA1",
	2: "SHA3",
}
var HashType_value = map[string]int32{
	"SHA256": 0,
	"SHA1":   1,
	"SHA3":   2,
}

func (x HashType) String() string {
	return proto.EnumName(HashType_name, int32(x))
}

// farmer account's info
type FarmerAccount struct {
	// farmer's id, unique
	FarmerID string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
	// used for election, used as vote
	Balance uint32 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	// farmer state
	State FarmerState `protobuf:"varint,3,opt,name=state,enum=protos.FarmerState" json:"state,omitempty"`
	// last modified this obj's time
	LastModifiedTime int64 `protobuf:"varint,4,opt,name=lastModifiedTime" json:"lastModifiedTime,omitempty"`
	// last challenge blocks's hash's time
	LastChallengeTime int64 `protobuf:"varint,5,opt,name=lastChallengeTime" json:"lastChallengeTime,omitempty"`
}

func (m *FarmerAccount) Reset()         { *m = FarmerAccount{} }
func (m *FarmerAccount) String() string { return proto.CompactTextString(m) }
func (*FarmerAccount) ProtoMessage()    {}

type FarmerOnLineReq struct {
	FarmerID string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
}

func (m *FarmerOnLineReq) Reset()         { *m = FarmerOnLineReq{} }
func (m *FarmerOnLineReq) String() string { return proto.CompactTextString(m) }
func (*FarmerOnLineReq) ProtoMessage()    {}

type FarmerOnLineRsp struct {
	Account *FarmerAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *FarmerOnLineRsp) Reset()         { *m = FarmerOnLineRsp{} }
func (m *FarmerOnLineRsp) String() string { return proto.CompactTextString(m) }
func (*FarmerOnLineRsp) ProtoMessage()    {}

func (m *FarmerOnLineRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type FarmerPingReq struct {
	FarmerID  string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
	HighBlock uint64 `protobuf:"varint,2,opt,name=highBlock" json:"highBlock,omitempty"`
	LowBlock  uint64 `protobuf:"varint,3,opt,name=lowBlock" json:"lowBlock,omitempty"`
}

func (m *FarmerPingReq) Reset()         { *m = FarmerPingReq{} }
func (m *FarmerPingReq) String() string { return proto.CompactTextString(m) }
func (*FarmerPingReq) ProtoMessage()    {}

type FarmerPingRsp struct {
	Account       *FarmerAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	NeedChallenge bool           `protobuf:"varint,2,opt,name=needChallenge" json:"needChallenge,omitempty"`
	HashType      HashType       `protobuf:"varint,3,opt,name=hashType,enum=protos.HashType" json:"hashType,omitempty"`
	HighBlock     uint64         `protobuf:"varint,4,opt,name=highBlock" json:"highBlock,omitempty"`
	LowBlock      uint64         `protobuf:"varint,5,opt,name=lowBlock" json:"lowBlock,omitempty"`
	NextPing      int64          `protobuf:"varint,6,opt,name=nextPing" json:"nextPing,omitempty"`
}

func (m *FarmerPingRsp) Reset()         { *m = FarmerPingRsp{} }
func (m *FarmerPingRsp) String() string { return proto.CompactTextString(m) }
func (*FarmerPingRsp) ProtoMessage()    {}

func (m *FarmerPingRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type FarmerChallengeReq struct {
	FarmerID   string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
	BlocksHash []byte `protobuf:"bytes,2,opt,name=blocksHash,proto3" json:"blocksHash,omitempty"`
}

func (m *FarmerChallengeReq) Reset()         { *m = FarmerChallengeReq{} }
func (m *FarmerChallengeReq) String() string { return proto.CompactTextString(m) }
func (*FarmerChallengeReq) ProtoMessage()    {}

type FarmerChallengeRsp struct {
	Account *FarmerAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *FarmerChallengeRsp) Reset()         { *m = FarmerChallengeRsp{} }
func (m *FarmerChallengeRsp) String() string { return proto.CompactTextString(m) }
func (*FarmerChallengeRsp) ProtoMessage()    {}

func (m *FarmerChallengeRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type FarmerOffLineReq struct {
	FarmerID string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
}

func (m *FarmerOffLineReq) Reset()         { *m = FarmerOffLineReq{} }
func (m *FarmerOffLineReq) String() string { return proto.CompactTextString(m) }
func (*FarmerOffLineReq) ProtoMessage()    {}

type FarmerOffLineRsp struct {
	Account *FarmerAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *FarmerOffLineRsp) Reset()         { *m = FarmerOffLineRsp{} }
func (m *FarmerOffLineRsp) String() string { return proto.CompactTextString(m) }
func (*FarmerOffLineRsp) ProtoMessage()    {}

func (m *FarmerOffLineRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func init() {
	proto.RegisterEnum("protos.FarmerState", FarmerState_name, FarmerState_value)
	proto.RegisterEnum("protos.HashType", HashType_name, HashType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for FarmerPublic service

type FarmerPublicClient interface {
	// when farmer lanch the cli(peer), it will call for notice supervisor that I'm online
	FarmerOnLine(ctx context.Context, in *FarmerOnLineReq, opts ...grpc.CallOption) (*FarmerOnLineRsp, error)
	// every once in a while, farmer call for tell supervisor that how many blocks(range) stored in the farmer, supervisor return whelther need challenge that result randomly, if need, also return block range.
	FarmerPing(ctx context.Context, in *FarmerPingReq, opts ...grpc.CallOption) (*FarmerPingRsp, error)
	// after FarmerPing, if need challenge, carry with blocks hash, if success, more balance(token) add
	FarmerChallenge(ctx context.Context, in *FarmerChallengeReq, opts ...grpc.CallOption) (*FarmerChallengeRsp, error)
	// farmer tell supervisor out of work
	FarmerOffLine(ctx context.Context, in *FarmerOffLineReq, opts ...grpc.CallOption) (*FarmerOffLineReq, error)
}

type farmerPublicClient struct {
	cc *grpc.ClientConn
}

func NewFarmerPublicClient(cc *grpc.ClientConn) FarmerPublicClient {
	return &farmerPublicClient{cc}
}

func (c *farmerPublicClient) FarmerOnLine(ctx context.Context, in *FarmerOnLineReq, opts ...grpc.CallOption) (*FarmerOnLineRsp, error) {
	out := new(FarmerOnLineRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerOnLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerPublicClient) FarmerPing(ctx context.Context, in *FarmerPingReq, opts ...grpc.CallOption) (*FarmerPingRsp, error) {
	out := new(FarmerPingRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerPublicClient) FarmerChallenge(ctx context.Context, in *FarmerChallengeReq, opts ...grpc.CallOption) (*FarmerChallengeRsp, error) {
	out := new(FarmerChallengeRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerPublicClient) FarmerOffLine(ctx context.Context, in *FarmerOffLineReq, opts ...grpc.CallOption) (*FarmerOffLineReq, error) {
	out := new(FarmerOffLineReq)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerOffLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FarmerPublic service

type FarmerPublicServer interface {
	// when farmer lanch the cli(peer), it will call for notice supervisor that I'm online
	FarmerOnLine(context.Context, *FarmerOnLineReq) (*FarmerOnLineRsp, error)
	// every once in a while, farmer call for tell supervisor that how many blocks(range) stored in the farmer, supervisor return whelther need challenge that result randomly, if need, also return block range.
	FarmerPing(context.Context, *FarmerPingReq) (*FarmerPingRsp, error)
	// after FarmerPing, if need challenge, carry with blocks hash, if success, more balance(token) add
	FarmerChallenge(context.Context, *FarmerChallengeReq) (*FarmerChallengeRsp, error)
	// farmer tell supervisor out of work
	FarmerOffLine(context.Context, *FarmerOffLineReq) (*FarmerOffLineReq, error)
}

func RegisterFarmerPublicServer(s *grpc.Server, srv FarmerPublicServer) {
	s.RegisterService(&_FarmerPublic_serviceDesc, srv)
}

func _FarmerPublic_FarmerOnLine_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FarmerOnLineReq)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FarmerPublicServer).FarmerOnLine(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FarmerPublic_FarmerPing_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FarmerPingReq)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FarmerPublicServer).FarmerPing(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FarmerPublic_FarmerChallenge_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FarmerChallengeReq)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FarmerPublicServer).FarmerChallenge(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FarmerPublic_FarmerOffLine_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FarmerOffLineReq)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FarmerPublicServer).FarmerOffLine(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _FarmerPublic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.FarmerPublic",
	HandlerType: (*FarmerPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FarmerOnLine",
			Handler:    _FarmerPublic_FarmerOnLine_Handler,
		},
		{
			MethodName: "FarmerPing",
			Handler:    _FarmerPublic_FarmerPing_Handler,
		},
		{
			MethodName: "FarmerChallenge",
			Handler:    _FarmerPublic_FarmerChallenge_Handler,
		},
		{
			MethodName: "FarmerOffLine",
			Handler:    _FarmerPublic_FarmerOffLine_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
