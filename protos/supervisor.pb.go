// Code generated by protoc-gen-go.
// source: supervisor.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	supervisor.proto

It has these top-level messages:
	FarmerAccount
	FarmerOnLineReq
	FarmerOnLineRsp
	BlocksRange
	FarmerPingReq
	FarmerPingRsp
	FarmerConquerChallengeReq
	FarmerConquerChallengeRsp
	FarmerOffLineReq
	FarmerOffLineRsp
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// farmer state
type FarmerState int32

const (
	FarmerState_OFFLINE FarmerState = 0
	FarmerState_ONLINE  FarmerState = 1
	FarmerState_LOST    FarmerState = 2
)

var FarmerState_name = map[int32]string{
	0: "OFFLINE",
	1: "ONLINE",
	2: "LOST",
}
var FarmerState_value = map[string]int32{
	"OFFLINE": 0,
	"ONLINE":  1,
	"LOST":    2,
}

func (x FarmerState) String() string {
	return proto.EnumName(FarmerState_name, int32(x))
}
func (FarmerState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HashAlgo int32

const (
	HashAlgo_MD5     HashAlgo = 0
	HashAlgo_SHA1    HashAlgo = 1
	HashAlgo_SHA224  HashAlgo = 2
	HashAlgo_SHA256  HashAlgo = 3
	HashAlgo_SHA384  HashAlgo = 4
	HashAlgo_SHA512  HashAlgo = 5
	HashAlgo_SHA3224 HashAlgo = 6
	HashAlgo_SHA3256 HashAlgo = 7
	HashAlgo_SHA3384 HashAlgo = 8
	HashAlgo_SHA3512 HashAlgo = 9
)

var HashAlgo_name = map[int32]string{
	0: "MD5",
	1: "SHA1",
	2: "SHA224",
	3: "SHA256",
	4: "SHA384",
	5: "SHA512",
	6: "SHA3224",
	7: "SHA3256",
	8: "SHA3384",
	9: "SHA3512",
}
var HashAlgo_value = map[string]int32{
	"MD5":     0,
	"SHA1":    1,
	"SHA224":  2,
	"SHA256":  3,
	"SHA384":  4,
	"SHA512":  5,
	"SHA3224": 6,
	"SHA3256": 7,
	"SHA3384": 8,
	"SHA3512": 9,
}

func (x HashAlgo) String() string {
	return proto.EnumName(HashAlgo_name, int32(x))
}
func (HashAlgo) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// farmer account's info
type FarmerAccount struct {
	// farmer's id, unique
	FarmerID string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
	// used for election, used as vote
	Balance uint32 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	// farmer state
	State FarmerState `protobuf:"varint,3,opt,name=state,enum=protos.FarmerState" json:"state,omitempty"`
	// last modified this obj's time
	LastModifiedTime int64 `protobuf:"varint,4,opt,name=lastModifiedTime" json:"lastModifiedTime,omitempty"`
	// last challenge blocks's hash's time
	LastChallengeTime int64 `protobuf:"varint,5,opt,name=lastChallengeTime" json:"lastChallengeTime,omitempty"`
}

func (m *FarmerAccount) Reset()                    { *m = FarmerAccount{} }
func (m *FarmerAccount) String() string            { return proto.CompactTextString(m) }
func (*FarmerAccount) ProtoMessage()               {}
func (*FarmerAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FarmerOnLineReq struct {
	FarmerID string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
}

func (m *FarmerOnLineReq) Reset()                    { *m = FarmerOnLineReq{} }
func (m *FarmerOnLineReq) String() string            { return proto.CompactTextString(m) }
func (*FarmerOnLineReq) ProtoMessage()               {}
func (*FarmerOnLineReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FarmerOnLineRsp struct {
	Account  *FarmerAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	NextPing int64          `protobuf:"varint,2,opt,name=nextPing" json:"nextPing,omitempty"`
}

func (m *FarmerOnLineRsp) Reset()                    { *m = FarmerOnLineRsp{} }
func (m *FarmerOnLineRsp) String() string            { return proto.CompactTextString(m) }
func (*FarmerOnLineRsp) ProtoMessage()               {}
func (*FarmerOnLineRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FarmerOnLineRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type BlocksRange struct {
	HighBlockNumber uint64 `protobuf:"varint,1,opt,name=highBlockNumber" json:"highBlockNumber,omitempty"`
	LowBlockNumber  uint64 `protobuf:"varint,2,opt,name=lowBlockNumber" json:"lowBlockNumber,omitempty"`
}

func (m *BlocksRange) Reset()                    { *m = BlocksRange{} }
func (m *BlocksRange) String() string            { return proto.CompactTextString(m) }
func (*BlocksRange) ProtoMessage()               {}
func (*BlocksRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type FarmerPingReq struct {
	FarmerID    string       `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
	BlocksRange *BlocksRange `protobuf:"bytes,2,opt,name=blocksRange" json:"blocksRange,omitempty"`
}

func (m *FarmerPingReq) Reset()                    { *m = FarmerPingReq{} }
func (m *FarmerPingReq) String() string            { return proto.CompactTextString(m) }
func (*FarmerPingReq) ProtoMessage()               {}
func (*FarmerPingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FarmerPingReq) GetBlocksRange() *BlocksRange {
	if m != nil {
		return m.BlocksRange
	}
	return nil
}

type FarmerPingRsp struct {
	Account       *FarmerAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	NeedChallenge bool           `protobuf:"varint,2,opt,name=needChallenge" json:"needChallenge,omitempty"`
	HashAlgo      HashAlgo       `protobuf:"varint,3,opt,name=hashAlgo,enum=protos.HashAlgo" json:"hashAlgo,omitempty"`
	BlocksRange   *BlocksRange   `protobuf:"bytes,4,opt,name=blocksRange" json:"blocksRange,omitempty"`
	NextPing      int64          `protobuf:"varint,5,opt,name=nextPing" json:"nextPing,omitempty"`
}

func (m *FarmerPingRsp) Reset()                    { *m = FarmerPingRsp{} }
func (m *FarmerPingRsp) String() string            { return proto.CompactTextString(m) }
func (*FarmerPingRsp) ProtoMessage()               {}
func (*FarmerPingRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FarmerPingRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *FarmerPingRsp) GetBlocksRange() *BlocksRange {
	if m != nil {
		return m.BlocksRange
	}
	return nil
}

type FarmerConquerChallengeReq struct {
	FarmerID    string       `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
	BlocksHash  string       `protobuf:"bytes,2,opt,name=blocksHash" json:"blocksHash,omitempty"`
	HashAlgo    HashAlgo     `protobuf:"varint,3,opt,name=hashAlgo,enum=protos.HashAlgo" json:"hashAlgo,omitempty"`
	BlocksRange *BlocksRange `protobuf:"bytes,4,opt,name=blocksRange" json:"blocksRange,omitempty"`
}

func (m *FarmerConquerChallengeReq) Reset()                    { *m = FarmerConquerChallengeReq{} }
func (m *FarmerConquerChallengeReq) String() string            { return proto.CompactTextString(m) }
func (*FarmerConquerChallengeReq) ProtoMessage()               {}
func (*FarmerConquerChallengeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FarmerConquerChallengeReq) GetBlocksRange() *BlocksRange {
	if m != nil {
		return m.BlocksRange
	}
	return nil
}

type FarmerConquerChallengeRsp struct {
	Account   *FarmerAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	ConquerOK bool           `protobuf:"varint,2,opt,name=conquerOK" json:"conquerOK,omitempty"`
}

func (m *FarmerConquerChallengeRsp) Reset()                    { *m = FarmerConquerChallengeRsp{} }
func (m *FarmerConquerChallengeRsp) String() string            { return proto.CompactTextString(m) }
func (*FarmerConquerChallengeRsp) ProtoMessage()               {}
func (*FarmerConquerChallengeRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FarmerConquerChallengeRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type FarmerOffLineReq struct {
	FarmerID string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
}

func (m *FarmerOffLineReq) Reset()                    { *m = FarmerOffLineReq{} }
func (m *FarmerOffLineReq) String() string            { return proto.CompactTextString(m) }
func (*FarmerOffLineReq) ProtoMessage()               {}
func (*FarmerOffLineReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type FarmerOffLineRsp struct {
	Account *FarmerAccount `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *FarmerOffLineRsp) Reset()                    { *m = FarmerOffLineRsp{} }
func (m *FarmerOffLineRsp) String() string            { return proto.CompactTextString(m) }
func (*FarmerOffLineRsp) ProtoMessage()               {}
func (*FarmerOffLineRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FarmerOffLineRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func init() {
	proto.RegisterType((*FarmerAccount)(nil), "protos.FarmerAccount")
	proto.RegisterType((*FarmerOnLineReq)(nil), "protos.FarmerOnLineReq")
	proto.RegisterType((*FarmerOnLineRsp)(nil), "protos.FarmerOnLineRsp")
	proto.RegisterType((*BlocksRange)(nil), "protos.BlocksRange")
	proto.RegisterType((*FarmerPingReq)(nil), "protos.FarmerPingReq")
	proto.RegisterType((*FarmerPingRsp)(nil), "protos.FarmerPingRsp")
	proto.RegisterType((*FarmerConquerChallengeReq)(nil), "protos.FarmerConquerChallengeReq")
	proto.RegisterType((*FarmerConquerChallengeRsp)(nil), "protos.FarmerConquerChallengeRsp")
	proto.RegisterType((*FarmerOffLineReq)(nil), "protos.FarmerOffLineReq")
	proto.RegisterType((*FarmerOffLineRsp)(nil), "protos.FarmerOffLineRsp")
	proto.RegisterEnum("protos.FarmerState", FarmerState_name, FarmerState_value)
	proto.RegisterEnum("protos.HashAlgo", HashAlgo_name, HashAlgo_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for FarmerPublic service

type FarmerPublicClient interface {
	// when farmer lanch the cli(peer), it will call for notice supervisor that I'm online
	FarmerOnLine(ctx context.Context, in *FarmerOnLineReq, opts ...grpc.CallOption) (*FarmerOnLineRsp, error)
	// every once in a while, farmer call for tell supervisor that how many blocks(range) stored in the farmer, supervisor return whelther need challenge that result randomly, if need, also return block range.
	FarmerPing(ctx context.Context, in *FarmerPingReq, opts ...grpc.CallOption) (*FarmerPingRsp, error)
	// after FarmerPing, if need challenge, carry with blocks hash, if success, more balance(token) add
	FarmerConquerChallenge(ctx context.Context, in *FarmerConquerChallengeReq, opts ...grpc.CallOption) (*FarmerConquerChallengeRsp, error)
	// farmer tell supervisor out of work
	FarmerOffLine(ctx context.Context, in *FarmerOffLineReq, opts ...grpc.CallOption) (*FarmerOffLineRsp, error)
}

type farmerPublicClient struct {
	cc *grpc.ClientConn
}

func NewFarmerPublicClient(cc *grpc.ClientConn) FarmerPublicClient {
	return &farmerPublicClient{cc}
}

func (c *farmerPublicClient) FarmerOnLine(ctx context.Context, in *FarmerOnLineReq, opts ...grpc.CallOption) (*FarmerOnLineRsp, error) {
	out := new(FarmerOnLineRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerOnLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerPublicClient) FarmerPing(ctx context.Context, in *FarmerPingReq, opts ...grpc.CallOption) (*FarmerPingRsp, error) {
	out := new(FarmerPingRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerPublicClient) FarmerConquerChallenge(ctx context.Context, in *FarmerConquerChallengeReq, opts ...grpc.CallOption) (*FarmerConquerChallengeRsp, error) {
	out := new(FarmerConquerChallengeRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerConquerChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerPublicClient) FarmerOffLine(ctx context.Context, in *FarmerOffLineReq, opts ...grpc.CallOption) (*FarmerOffLineRsp, error) {
	out := new(FarmerOffLineRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerOffLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FarmerPublic service

type FarmerPublicServer interface {
	// when farmer lanch the cli(peer), it will call for notice supervisor that I'm online
	FarmerOnLine(context.Context, *FarmerOnLineReq) (*FarmerOnLineRsp, error)
	// every once in a while, farmer call for tell supervisor that how many blocks(range) stored in the farmer, supervisor return whelther need challenge that result randomly, if need, also return block range.
	FarmerPing(context.Context, *FarmerPingReq) (*FarmerPingRsp, error)
	// after FarmerPing, if need challenge, carry with blocks hash, if success, more balance(token) add
	FarmerConquerChallenge(context.Context, *FarmerConquerChallengeReq) (*FarmerConquerChallengeRsp, error)
	// farmer tell supervisor out of work
	FarmerOffLine(context.Context, *FarmerOffLineReq) (*FarmerOffLineRsp, error)
}

func RegisterFarmerPublicServer(s *grpc.Server, srv FarmerPublicServer) {
	s.RegisterService(&_FarmerPublic_serviceDesc, srv)
}

func _FarmerPublic_FarmerOnLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmerOnLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerPublicServer).FarmerOnLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.FarmerPublic/FarmerOnLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerPublicServer).FarmerOnLine(ctx, req.(*FarmerOnLineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmerPublic_FarmerPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmerPingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerPublicServer).FarmerPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.FarmerPublic/FarmerPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerPublicServer).FarmerPing(ctx, req.(*FarmerPingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmerPublic_FarmerConquerChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmerConquerChallengeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerPublicServer).FarmerConquerChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.FarmerPublic/FarmerConquerChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerPublicServer).FarmerConquerChallenge(ctx, req.(*FarmerConquerChallengeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmerPublic_FarmerOffLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmerOffLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmerPublicServer).FarmerOffLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.FarmerPublic/FarmerOffLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmerPublicServer).FarmerOffLine(ctx, req.(*FarmerOffLineReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FarmerPublic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.FarmerPublic",
	HandlerType: (*FarmerPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FarmerOnLine",
			Handler:    _FarmerPublic_FarmerOnLine_Handler,
		},
		{
			MethodName: "FarmerPing",
			Handler:    _FarmerPublic_FarmerPing_Handler,
		},
		{
			MethodName: "FarmerConquerChallenge",
			Handler:    _FarmerPublic_FarmerConquerChallenge_Handler,
		},
		{
			MethodName: "FarmerOffLine",
			Handler:    _FarmerPublic_FarmerOffLine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("supervisor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x13, 0x27, 0x71, 0xc6, 0xa4, 0xd9, 0x2e, 0x6a, 0xeb, 0xe6, 0x04, 0x06, 0xa1, 0xaa,
	0x87, 0x8a, 0xba, 0x0d, 0x42, 0x08, 0x21, 0xa5, 0x1f, 0x51, 0xab, 0xa6, 0x09, 0x6a, 0x2a, 0xce,
	0x38, 0xce, 0x26, 0xb1, 0x70, 0xec, 0xd4, 0xeb, 0x00, 0x57, 0xce, 0x1c, 0xf8, 0x27, 0xdc, 0xf9,
	0x77, 0xec, 0x87, 0x9d, 0xc4, 0xc6, 0x11, 0x54, 0xe2, 0xe4, 0xdd, 0x99, 0x79, 0x33, 0x6f, 0xde,
	0xce, 0x18, 0x10, 0x9d, 0xcf, 0x48, 0xf8, 0xd9, 0xa5, 0x41, 0x78, 0x38, 0x0b, 0x83, 0x28, 0xc0,
	0x65, 0xf1, 0xa1, 0xe6, 0x77, 0x05, 0x6a, 0x6d, 0x3b, 0x9c, 0x92, 0xb0, 0xe5, 0x38, 0xc1, 0xdc,
	0x8f, 0x30, 0x02, 0x6d, 0x24, 0x0c, 0x57, 0xe7, 0x86, 0xf2, 0x44, 0xd9, 0xaf, 0xe2, 0x3a, 0x54,
	0x06, 0xb6, 0x67, 0xfb, 0x0e, 0x31, 0x0a, 0xcc, 0x50, 0xc3, 0x26, 0x94, 0x68, 0x64, 0x47, 0xc4,
	0x28, 0xb2, 0xeb, 0xa6, 0xf5, 0x58, 0xe6, 0xa4, 0x87, 0x32, 0x51, 0x9f, 0xbb, 0xb0, 0x01, 0xc8,
	0xb3, 0x69, 0x74, 0x13, 0x0c, 0xdd, 0x91, 0x4b, 0x86, 0x77, 0xee, 0x94, 0x18, 0x2a, 0x0b, 0x2f,
	0xe2, 0x3d, 0xd8, 0xe2, 0x9e, 0xb3, 0x89, 0xed, 0x79, 0xc4, 0x1f, 0x13, 0xe1, 0x2a, 0x71, 0x97,
	0xf9, 0x0c, 0xea, 0x32, 0x47, 0xcf, 0xef, 0xb8, 0x3e, 0xb9, 0x25, 0xf7, 0x7f, 0xd2, 0x31, 0xaf,
	0x33, 0x41, 0x74, 0x86, 0x5f, 0x40, 0xc5, 0x96, 0xf4, 0x45, 0x8c, 0x6e, 0x6d, 0xa7, 0x29, 0xad,
	0xf4, 0xe6, 0x93, 0xaf, 0xd1, 0x7b, 0xd7, 0x1f, 0x8b, 0x56, 0x8a, 0xe6, 0x3b, 0xd0, 0x4f, 0xbd,
	0xc0, 0xf9, 0x44, 0x6f, 0x6d, 0x46, 0x05, 0xef, 0x42, 0x7d, 0xe2, 0x8e, 0x27, 0xc2, 0xd4, 0x9d,
	0x4f, 0x07, 0x24, 0x14, 0x09, 0x55, 0xbc, 0x03, 0x9b, 0x5e, 0xf0, 0x65, 0xd5, 0xce, 0xf1, 0x2a,
	0x23, 0x13, 0xcb, 0xc7, 0x73, 0xe6, 0xf2, 0xc5, 0xfb, 0xa0, 0x0f, 0x96, 0x25, 0x04, 0x4e, 0x5f,
	0x6a, 0xb6, 0x52, 0xdd, 0xfc, 0xa9, 0xa4, 0xb2, 0x3d, 0xa0, 0xb1, 0x6d, 0xa8, 0xf9, 0x84, 0x0c,
	0x17, 0x9a, 0x8a, 0x2a, 0x1a, 0x7b, 0x28, 0x6d, 0x62, 0xd3, 0x49, 0xcb, 0x1b, 0x07, 0xf1, 0x5b,
	0xa1, 0x04, 0x7f, 0x19, 0xdb, 0xb3, 0xf4, 0xd4, 0xb5, 0xf4, 0x52, 0xea, 0xc9, 0xf7, 0xfa, 0xa1,
	0xc0, 0x9e, 0x24, 0x72, 0x16, 0xf8, 0xf7, 0x73, 0xf6, 0x49, 0x08, 0xe4, 0x4b, 0x81, 0x01, 0x64,
	0x2d, 0x5e, 0x5d, 0x70, 0xac, 0xfe, 0x5f, 0x8e, 0xe6, 0x87, 0xb5, 0x84, 0x1e, 0xa0, 0xe6, 0x16,
	0x54, 0x1d, 0x09, 0xef, 0x5d, 0x4b, 0x25, 0xcd, 0xe7, 0x80, 0xe2, 0xa1, 0x1b, 0x8d, 0xd6, 0x8f,
	0xe6, 0x9b, 0x6c, 0xd4, 0xbf, 0x17, 0x3d, 0x78, 0x09, 0xfa, 0xea, 0xfe, 0xe8, 0x50, 0xe9, 0xb5,
	0xdb, 0x9d, 0xab, 0xee, 0x05, 0xda, 0x60, 0xb2, 0x95, 0x7b, 0x5d, 0x71, 0x56, 0xb0, 0x06, 0x6a,
	0xa7, 0xd7, 0xbf, 0x43, 0x85, 0x83, 0x6f, 0x0a, 0x68, 0x0b, 0x89, 0x2a, 0x50, 0xbc, 0x39, 0x6f,
	0xb2, 0x58, 0xe6, 0xef, 0x5f, 0xb6, 0x8e, 0x58, 0x24, 0x43, 0xb1, 0x93, 0x65, 0x9d, 0xa0, 0x42,
	0x72, 0x6e, 0xbe, 0x42, 0xc5, 0xf8, 0x7c, 0xfc, 0xfa, 0x04, 0xa9, 0xf1, 0xb9, 0x79, 0x64, 0xa1,
	0x12, 0x2f, 0xc9, 0xed, 0x1c, 0x50, 0x5e, 0x5c, 0x18, 0xa2, 0x92, 0x5c, 0x38, 0x44, 0x4b, 0x2e,
	0x1c, 0x53, 0xb5, 0x7e, 0x15, 0xe0, 0x51, 0x3c, 0xb2, 0xf3, 0x81, 0xe7, 0x3a, 0xf8, 0x34, 0xb9,
	0xcb, 0xed, 0xc4, 0xbb, 0xe9, 0x6e, 0x17, 0x8b, 0xdd, 0xc8, 0x77, 0xd0, 0x99, 0xb9, 0x81, 0xdf,
	0x02, 0x2c, 0xd7, 0x00, 0x67, 0xf4, 0x8a, 0x17, 0xad, 0x91, 0x67, 0x16, 0xe8, 0x8f, 0xb0, 0x93,
	0x3f, 0x02, 0xf8, 0x69, 0x1a, 0x92, 0x33, 0xb3, 0x8d, 0xbf, 0x85, 0x88, 0x0a, 0x17, 0xc9, 0x9a,
	0xc6, 0xcf, 0x8c, 0x8d, 0x4c, 0x2f, 0x8b, 0x19, 0x69, 0xac, 0xf1, 0xf0, 0x34, 0x03, 0xf9, 0x0f,
	0x3e, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x19, 0x14, 0x50, 0x06, 0x9e, 0x05, 0x00, 0x00,
}
