/*
Copyright Mojing Inc. 2016 All Rights Reserved.
Written by mint.zhao.chiu@gmail.com. github.com: https://www.github.com/mintzhao

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package protos;

//import "github.com/conseweb/common/protos/error.proto";
import "error.proto";

// idprovider public service
service IDPP {
    // Acquire email/tel captcha
    rpc AcquireCaptcha(AcquireCaptchaReq) returns (AcquireCaptchaRsp) {}
    // Verify email/tel captcha
    rpc VerifyCaptcha(VerifyCaptchaReq) returns (VerifyCaptchaRsp) {}
    // Register a user
    rpc RegisterUser(RegisterUserReq) returns (RegisterUserRsp) {}
    // Bind a device for a user
    rpc BindDeviceForUser(BindDeviceReq) returns (BindDeviceRsp) {}
}

// idprovider admin service
service IDPA {
    // Verify device
    rpc VerifyDevice(VerifyDeviceReq) returns (VerifyDeviceRsp) {}
}

// which way to unique a user
enum SignUpType {
    EMAIL = 0;
    MOBILE = 1;
}

// user type
enum UserType {
    NORMAL = 0;
    ORGANIZATION = 1;
}

// User class
// not for orm, just for easy code
message User {
    string userID = 1;
    string email = 2;
    string mobile = 3;
    string pass = 4; // the pass using algo brypt(md5(user pass)), user pass can also be user real pass's md5
    string nick = 5;
    UserType userType = 6;
    bytes wpub = 7;
    bytes spub = 8;
    repeated Device devices = 9; // every user can hold lots of device, but now may be just one.
}

// device for
enum DeviceFor {
    FARMER = 0;
    LEDGER = 1;
    TELLER = 2;
    SUPERVISOR = 3;
    IDPROVIDER = 4;
}

// user device
message Device {
    string userID = 1;
    string deviceID = 2;
    string os = 3;
    DeviceFor for = 4;
    string mac = 5;
    string alias = 6;
    bytes wpub = 7;
    bytes spub = 8;
}

// idpp create certificate request
message IDPCertCreateReq {
    int64 ts = 1;
    string id = 2;
    bytes pubKey = 3;
    bytes sig = 4;
}

message IDPCertCreateRsp {
    Error error = 1;
    bytes cert = 2;
    bytes rootcert = 3;
}

// AcquireCaptchaReq holds request
message AcquireCaptchaReq {
    SignUpType signUpType = 1;
    string signUp = 2;
}

message AcquireCaptchaRsp {
    Error error = 1;
}

message VerifyCaptchaReq {
    SignUpType signUpType = 1;
    string signUp = 2;
    string captcha = 3;
}

message VerifyCaptchaRsp {
    Error error = 1;
}

message RegisterUserReq {
    SignUpType signUpType = 1;
    string signUp = 2;
    string nick = 3;
    string pass = 4;
    bytes wpub = 5;
    bytes spub = 6;
    bytes sign = 7;
    UserType userType = 8;
}

message RegisterUserRsp {
    Error error = 1;
    User user = 2;
}

message BindDeviceReq {
    string userID = 1;
    string os = 2;
    DeviceFor for = 3;
    string mac = 4;
    string alias = 5;
    // device wallet public key
    bytes wpub = 6;
    // device signature public key
    bytes spub = 7;
    // request signature, though has spub, but using user's spub signature this message, dont forget!
    bytes sign = 8;
}

message BindDeviceRsp {
    Error error = 1;
    Device device = 2;
}

message VerifyDeviceReq {
    string deviceID = 1;
    DeviceFor for = 2;
    string userID = 3;
    string deviceAlias = 4;
}

message VerifyDeviceRsp {
    Error error = 1;
}
