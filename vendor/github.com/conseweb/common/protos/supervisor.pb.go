// Code generated by protoc-gen-go.
// source: supervisor.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// farmer state
type FarmerState int32

const (
	FarmerState_OFFLINE FarmerState = 0
	FarmerState_ONLINE  FarmerState = 1
	FarmerState_LOST    FarmerState = 2
)

var FarmerState_name = map[int32]string{
	0: "OFFLINE",
	1: "ONLINE",
	2: "LOST",
}
var FarmerState_value = map[string]int32{
	"OFFLINE": 0,
	"ONLINE":  1,
	"LOST":    2,
}

func (x FarmerState) String() string {
	return proto.EnumName(FarmerState_name, int32(x))
}

type HashAlgo int32

const (
	HashAlgo_MD5     HashAlgo = 0
	HashAlgo_SHA1    HashAlgo = 1
	HashAlgo_SHA224  HashAlgo = 2
	HashAlgo_SHA256  HashAlgo = 3
	HashAlgo_SHA384  HashAlgo = 4
	HashAlgo_SHA512  HashAlgo = 5
	HashAlgo_SHA3224 HashAlgo = 6
	HashAlgo_SHA3256 HashAlgo = 7
	HashAlgo_SHA3384 HashAlgo = 8
	HashAlgo_SHA3512 HashAlgo = 9
)

var HashAlgo_name = map[int32]string{
	0: "MD5",
	1: "SHA1",
	2: "SHA224",
	3: "SHA256",
	4: "SHA384",
	5: "SHA512",
	6: "SHA3224",
	7: "SHA3256",
	8: "SHA3384",
	9: "SHA3512",
}
var HashAlgo_value = map[string]int32{
	"MD5":     0,
	"SHA1":    1,
	"SHA224":  2,
	"SHA256":  3,
	"SHA384":  4,
	"SHA512":  5,
	"SHA3224": 6,
	"SHA3256": 7,
	"SHA3384": 8,
	"SHA3512": 9,
}

func (x HashAlgo) String() string {
	return proto.EnumName(HashAlgo_name, int32(x))
}

// farmer account's info
type FarmerAccount struct {
	// farmer's id, unique
	FarmerID string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
	// used for election, used as vote
	Balance uint32 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	// farmer state
	State FarmerState `protobuf:"varint,3,opt,name=state,enum=protos.FarmerState" json:"state,omitempty"`
	// last modified this obj's time
	LastModifiedTime int64 `protobuf:"varint,4,opt,name=lastModifiedTime" json:"lastModifiedTime,omitempty"`
	// last challenge blocks's hash's time
	LastChallengeTime int64 `protobuf:"varint,5,opt,name=lastChallengeTime" json:"lastChallengeTime,omitempty"`
}

func (m *FarmerAccount) Reset()         { *m = FarmerAccount{} }
func (m *FarmerAccount) String() string { return proto.CompactTextString(m) }
func (*FarmerAccount) ProtoMessage()    {}

type FarmerOnLineReq struct {
	FarmerID string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
}

func (m *FarmerOnLineReq) Reset()         { *m = FarmerOnLineReq{} }
func (m *FarmerOnLineReq) String() string { return proto.CompactTextString(m) }
func (*FarmerOnLineReq) ProtoMessage()    {}

type FarmerOnLineRsp struct {
	Error    *Error         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Account  *FarmerAccount `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	NextPing int64          `protobuf:"varint,3,opt,name=nextPing" json:"nextPing,omitempty"`
}

func (m *FarmerOnLineRsp) Reset()         { *m = FarmerOnLineRsp{} }
func (m *FarmerOnLineRsp) String() string { return proto.CompactTextString(m) }
func (*FarmerOnLineRsp) ProtoMessage()    {}

func (m *FarmerOnLineRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *FarmerOnLineRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type BlocksRange struct {
	HighBlockNumber uint64 `protobuf:"varint,1,opt,name=highBlockNumber" json:"highBlockNumber,omitempty"`
	LowBlockNumber  uint64 `protobuf:"varint,2,opt,name=lowBlockNumber" json:"lowBlockNumber,omitempty"`
}

func (m *BlocksRange) Reset()         { *m = BlocksRange{} }
func (m *BlocksRange) String() string { return proto.CompactTextString(m) }
func (*BlocksRange) ProtoMessage()    {}

type FarmerPingReq struct {
	FarmerID    string       `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
	BlocksRange *BlocksRange `protobuf:"bytes,2,opt,name=blocksRange" json:"blocksRange,omitempty"`
}

func (m *FarmerPingReq) Reset()         { *m = FarmerPingReq{} }
func (m *FarmerPingReq) String() string { return proto.CompactTextString(m) }
func (*FarmerPingReq) ProtoMessage()    {}

func (m *FarmerPingReq) GetBlocksRange() *BlocksRange {
	if m != nil {
		return m.BlocksRange
	}
	return nil
}

type FarmerPingRsp struct {
	Error         *Error         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Account       *FarmerAccount `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	NeedChallenge bool           `protobuf:"varint,3,opt,name=needChallenge" json:"needChallenge,omitempty"`
	HashAlgo      HashAlgo       `protobuf:"varint,4,opt,name=hashAlgo,enum=protos.HashAlgo" json:"hashAlgo,omitempty"`
	BlocksRange   *BlocksRange   `protobuf:"bytes,5,opt,name=blocksRange" json:"blocksRange,omitempty"`
	NextPing      int64          `protobuf:"varint,6,opt,name=nextPing" json:"nextPing,omitempty"`
}

func (m *FarmerPingRsp) Reset()         { *m = FarmerPingRsp{} }
func (m *FarmerPingRsp) String() string { return proto.CompactTextString(m) }
func (*FarmerPingRsp) ProtoMessage()    {}

func (m *FarmerPingRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *FarmerPingRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *FarmerPingRsp) GetBlocksRange() *BlocksRange {
	if m != nil {
		return m.BlocksRange
	}
	return nil
}

type FarmerConquerChallengeReq struct {
	FarmerID    string       `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
	BlocksHash  string       `protobuf:"bytes,2,opt,name=blocksHash" json:"blocksHash,omitempty"`
	HashAlgo    HashAlgo     `protobuf:"varint,3,opt,name=hashAlgo,enum=protos.HashAlgo" json:"hashAlgo,omitempty"`
	BlocksRange *BlocksRange `protobuf:"bytes,4,opt,name=blocksRange" json:"blocksRange,omitempty"`
}

func (m *FarmerConquerChallengeReq) Reset()         { *m = FarmerConquerChallengeReq{} }
func (m *FarmerConquerChallengeReq) String() string { return proto.CompactTextString(m) }
func (*FarmerConquerChallengeReq) ProtoMessage()    {}

func (m *FarmerConquerChallengeReq) GetBlocksRange() *BlocksRange {
	if m != nil {
		return m.BlocksRange
	}
	return nil
}

type FarmerConquerChallengeRsp struct {
	Error     *Error         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Account   *FarmerAccount `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	ConquerOK bool           `protobuf:"varint,3,opt,name=conquerOK" json:"conquerOK,omitempty"`
}

func (m *FarmerConquerChallengeRsp) Reset()         { *m = FarmerConquerChallengeRsp{} }
func (m *FarmerConquerChallengeRsp) String() string { return proto.CompactTextString(m) }
func (*FarmerConquerChallengeRsp) ProtoMessage()    {}

func (m *FarmerConquerChallengeRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *FarmerConquerChallengeRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type FarmerOffLineReq struct {
	FarmerID string `protobuf:"bytes,1,opt,name=farmerID" json:"farmerID,omitempty"`
}

func (m *FarmerOffLineReq) Reset()         { *m = FarmerOffLineReq{} }
func (m *FarmerOffLineReq) String() string { return proto.CompactTextString(m) }
func (*FarmerOffLineReq) ProtoMessage()    {}

type FarmerOffLineRsp struct {
	Error   *Error         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Account *FarmerAccount `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
}

func (m *FarmerOffLineRsp) Reset()         { *m = FarmerOffLineRsp{} }
func (m *FarmerOffLineRsp) String() string { return proto.CompactTextString(m) }
func (*FarmerOffLineRsp) ProtoMessage()    {}

func (m *FarmerOffLineRsp) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *FarmerOffLineRsp) GetAccount() *FarmerAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func init() {
	proto.RegisterEnum("protos.FarmerState", FarmerState_name, FarmerState_value)
	proto.RegisterEnum("protos.HashAlgo", HashAlgo_name, HashAlgo_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for FarmerPublic service

type FarmerPublicClient interface {
	// when farmer lanch the cli(peer), it will call for notice supervisor that I'm online
	FarmerOnLine(ctx context.Context, in *FarmerOnLineReq, opts ...grpc.CallOption) (*FarmerOnLineRsp, error)
	// every once in a while, farmer call for tell supervisor that how many blocks(range) stored in the farmer, supervisor return whelther need challenge that result randomly, if need, also return block range.
	FarmerPing(ctx context.Context, in *FarmerPingReq, opts ...grpc.CallOption) (*FarmerPingRsp, error)
	// after FarmerPing, if need challenge, carry with blocks hash, if success, more balance(token) add
	FarmerConquerChallenge(ctx context.Context, in *FarmerConquerChallengeReq, opts ...grpc.CallOption) (*FarmerConquerChallengeRsp, error)
	// farmer tell supervisor out of work
	FarmerOffLine(ctx context.Context, in *FarmerOffLineReq, opts ...grpc.CallOption) (*FarmerOffLineRsp, error)
}

type farmerPublicClient struct {
	cc *grpc.ClientConn
}

func NewFarmerPublicClient(cc *grpc.ClientConn) FarmerPublicClient {
	return &farmerPublicClient{cc}
}

func (c *farmerPublicClient) FarmerOnLine(ctx context.Context, in *FarmerOnLineReq, opts ...grpc.CallOption) (*FarmerOnLineRsp, error) {
	out := new(FarmerOnLineRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerOnLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerPublicClient) FarmerPing(ctx context.Context, in *FarmerPingReq, opts ...grpc.CallOption) (*FarmerPingRsp, error) {
	out := new(FarmerPingRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerPublicClient) FarmerConquerChallenge(ctx context.Context, in *FarmerConquerChallengeReq, opts ...grpc.CallOption) (*FarmerConquerChallengeRsp, error) {
	out := new(FarmerConquerChallengeRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerConquerChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmerPublicClient) FarmerOffLine(ctx context.Context, in *FarmerOffLineReq, opts ...grpc.CallOption) (*FarmerOffLineRsp, error) {
	out := new(FarmerOffLineRsp)
	err := grpc.Invoke(ctx, "/protos.FarmerPublic/FarmerOffLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FarmerPublic service

type FarmerPublicServer interface {
	// when farmer lanch the cli(peer), it will call for notice supervisor that I'm online
	FarmerOnLine(context.Context, *FarmerOnLineReq) (*FarmerOnLineRsp, error)
	// every once in a while, farmer call for tell supervisor that how many blocks(range) stored in the farmer, supervisor return whelther need challenge that result randomly, if need, also return block range.
	FarmerPing(context.Context, *FarmerPingReq) (*FarmerPingRsp, error)
	// after FarmerPing, if need challenge, carry with blocks hash, if success, more balance(token) add
	FarmerConquerChallenge(context.Context, *FarmerConquerChallengeReq) (*FarmerConquerChallengeRsp, error)
	// farmer tell supervisor out of work
	FarmerOffLine(context.Context, *FarmerOffLineReq) (*FarmerOffLineRsp, error)
}

func RegisterFarmerPublicServer(s *grpc.Server, srv FarmerPublicServer) {
	s.RegisterService(&_FarmerPublic_serviceDesc, srv)
}

func _FarmerPublic_FarmerOnLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FarmerOnLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FarmerPublicServer).FarmerOnLine(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FarmerPublic_FarmerPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FarmerPingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FarmerPublicServer).FarmerPing(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FarmerPublic_FarmerConquerChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FarmerConquerChallengeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FarmerPublicServer).FarmerConquerChallenge(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FarmerPublic_FarmerOffLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FarmerOffLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FarmerPublicServer).FarmerOffLine(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _FarmerPublic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.FarmerPublic",
	HandlerType: (*FarmerPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FarmerOnLine",
			Handler:    _FarmerPublic_FarmerOnLine_Handler,
		},
		{
			MethodName: "FarmerPing",
			Handler:    _FarmerPublic_FarmerPing_Handler,
		},
		{
			MethodName: "FarmerConquerChallenge",
			Handler:    _FarmerPublic_FarmerConquerChallenge_Handler,
		},
		{
			MethodName: "FarmerOffLine",
			Handler:    _FarmerPublic_FarmerOffLine_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
